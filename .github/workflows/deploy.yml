name: Deploy to Oracle Cloud
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.ORACLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Oracle Cloud
      run: |
        ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o ConnectTimeout=30 -i ~/.ssh/id_rsa ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
          set -e  # Exit on any error

          echo "üöÄ Starting deployment to Oracle Cloud..."

          cd /home/opc/reverse-bundling

          echo "üì• Pulling latest changes from main branch..."
          git fetch origin
          git reset --hard origin/main

          echo "üßπ Cleaning up previous installation..."
          rm -rf node_modules package-lock.json .next build
          npm cache clean --force 2>/dev/null || true

          echo "üíæ Setting up memory optimization..."
          # Add swap space for better npm performance
          sudo swapoff -a 2>/dev/null || true
          sudo fallocate -l 2G /swapfile 2>/dev/null || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048 2>/dev/null
          sudo chmod 600 /swapfile 2>/dev/null || true
          sudo mkswap /swapfile 2>/dev/null || true
          sudo swapon /swapfile 2>/dev/null || true

          echo "üì¶ Installing dependencies efficiently..."
          # Use npm ci for faster, more reliable installs with extended timeout
          set +e  # Temporarily disable exit on error for retry logic

          # First try with production dependencies only for faster install
          echo "üîÑ Attempting production-only install first..."
          timeout 600 npm ci --omit=dev --prefer-offline --no-audit --no-fund --no-progress
          PROD_EXIT_CODE=$?

          if [ $PROD_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Production dependencies installed, now installing dev dependencies..."
            timeout 600 npm ci --include=dev --prefer-offline --no-audit --no-fund --no-progress
            DEV_EXIT_CODE=$?
          else
            echo "‚ö†Ô∏è Production install failed, trying full install..."
            timeout 600 npm ci --prefer-offline --no-audit --no-fund --no-progress
            DEV_EXIT_CODE=$?
          fi

          if [ $DEV_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è npm ci failed, trying npm install with cache optimization..."
            timeout 600 npm install --prefer-offline --no-audit --no-fund --no-progress
            EXIT_CODE=$?
          else
            EXIT_CODE=$DEV_EXIT_CODE
          fi

          set -e  # Re-enable exit on error

          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Dependency installation failed after all attempts"
            exit 1
          fi

          echo "üî® Building application..."
          # Set memory limit and build with extended timeout
          NODE_OPTIONS="--max-old-space-size=512" timeout 600 npm run build

          echo "üßπ Cleaning up temporary files..."
          sudo swapoff /swapfile 2>/dev/null || true
          sudo rm -f /swapfile 2>/dev/null || true

          echo "üóÑÔ∏è Running database migrations..."
          npx prisma generate
          npx prisma db push --accept-data-loss || echo "Database schema already up to date"

          echo "üîÑ Restarting application..."
          # Kill existing process and start new one
          pkill -f "remix-serve" || true
          cd /home/opc/reverse-bundling
          nohup node --max-old-space-size=64 ./node_modules/.bin/remix-serve ./build/server/index.js >> app.log 2>&1 &

          echo "‚è≥ Waiting for application to start..."
          sleep 15

          echo "üè• Checking application health..."
          if curl -f --max-time 30 http://localhost:3000/health 2>/dev/null; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application is running and healthy"
          else
            echo "‚ö†Ô∏è Application deployed but health check failed"
            echo "üîç Check application logs for details"
            exit 1
          fi
        EOF
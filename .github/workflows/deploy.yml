name: Deploy to Oracle Cloud
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.ORACLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Oracle Cloud
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
          set -e  # Exit on any error

          echo "🚀 Starting deployment to Oracle Cloud..."

          cd /home/opc/reverse-bundling

          echo "📥 Pulling latest changes from main branch..."
          git fetch origin
          git reset --hard origin/main

          echo "🧹 Cleaning up previous installation..."
          rm -rf node_modules package-lock.json .next build
          npm cache clean --force 2>/dev/null || true

          echo "💾 Setting up memory optimization..."
          # Add swap space for better npm performance
          sudo swapoff -a 2>/dev/null || true
          sudo fallocate -l 1G /swapfile 2>/dev/null || sudo dd if=/dev/zero of=/swapfile bs=1M count=1024 2>/dev/null
          sudo chmod 600 /swapfile 2>/dev/null || true
          sudo mkswap /swapfile 2>/dev/null || true
          sudo swapon /swapfile 2>/dev/null || true

          echo "📦 Installing dependencies efficiently..."
          # Use npm ci for faster, more reliable installs if lock file exists
          if [ -f package-lock.json ]; then
            timeout 600 npm ci --production=false --no-optional --prefer-offline || timeout 600 npm install --production=false --no-optional
          else
            timeout 600 npm install --production=false --no-optional
          fi

          echo "🔨 Building application..."
          # Set memory limit and build
          NODE_OPTIONS="--max-old-space-size=256" npm run build

          echo "🧹 Cleaning up temporary files..."
          sudo swapoff /swapfile 2>/dev/null || true
          sudo rm -f /swapfile 2>/dev/null || true

          echo "🗄️ Running database migrations..."
          npx prisma generate
          npx prisma db push --accept-data-loss || echo "Database schema already up to date"

          echo "🔄 Restarting application..."
          # Kill existing process and start new one
          pkill -f "remix-serve" || true
          cd /home/opc/reverse-bundling
          nohup node --max-old-space-size=32 ./node_modules/.bin/remix-serve ./build/server/index.js >> app.log 2>&1 &

          echo "⏳ Waiting for application to start..."
          sleep 10

          echo "🏥 Checking application health..."
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is running and healthy"
          else
            echo "⚠️ Application deployed but health check failed"
            echo "🔍 Check application logs for details"
            exit 1
          fi
        EOF
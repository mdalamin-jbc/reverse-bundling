name: Deploy to Oracle Cloud

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Oracle Cloud
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USER }}
        key: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
        port: 22
        timeout: 15m  # Increased from 30s to 15 minutes
        script: |
          # Set up error handling
          set -e
          set -o pipefail

          cd /home/opc/reverse-bundling

          echo "🚀 Starting deployment at $(date)..."

          # Function to log with timestamp
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }

          # Function to handle errors
          error_exit() {
            log "❌ Deployment failed at step: $1"
            log "📋 Last 50 lines of app.log:"
            tail -50 app.log 2>/dev/null || echo "No log file found"
            exit 1
          }

          # Check git status
          log "📋 Checking git status..."
          git status || error_exit "git status"

          # Pull latest changes
          log "⬇️ Pulling latest changes..."
          git pull origin main --no-edit || error_exit "git pull"

          # Show latest commit
          log "📝 Latest commit:"
          git log -1 --oneline

          # Load environment variables
          log "🔧 Loading environment variables..."
          if [ -f ".env.production" ]; then
            set -a
            source .env.production
            set +a
            log "✅ Environment variables loaded"
          else
            log "⚠️ Warning: .env.production not found, using system environment"
          fi

                    # Clean node_modules if it exists to avoid npm ci issues
          log "🧹 Cleaning node_modules..."
          if [ -d "node_modules" ]; then
            rm -rf node_modules || log "⚠️ Warning: Could not remove node_modules, continuing..."
          fi

          # Install dependencies
          log "📦 Installing dependencies..."
          npm ci --production=false || error_exit "npm ci"

          # Database setup
          log "🗄️ Setting up database..."
          npm run setup || error_exit "database setup"
          log "✅ Database setup completed"

          # Copy nginx configuration if it exists
          if [ -f "nginx.conf" ]; then
            log "� Updating nginx configuration..."
            sudo cp nginx.conf /usr/local/nginx/conf/nginx.conf || log "⚠️ Warning: Could not update nginx config"
          fi

          # Kill existing process gracefully - use a safer approach
          log "🛑 Stopping existing application..."
          if pgrep -f 'remix-serve' > /dev/null 2>&1; then
            log "Found running Remix processes - skipping kill to avoid session termination"
            log "Will start new process alongside existing ones"
          else
            log "No existing Remix processes found"
          fi

          # Wait a moment
          sleep 2

          # Clean up old build files (optional)
          log "🧹 Cleaning up old logs..."
          find . -name "*.log" -mtime +7 -delete 2>/dev/null || true

          # Start the application using systemd
          log "▶️ Restarting application via systemd..."
          sudo systemctl restart reverse-bundling.service || error_exit "systemctl restart"
          log "Application restarted via systemd"

          # Reload nginx to pick up any configuration changes
          log "🔄 Reloading nginx configuration..."
          sudo /usr/local/nginx/sbin/nginx -s reload || log "⚠️ Warning: Could not reload nginx"

          log "⏳ Waiting for application to start..."
          MAX_WAIT=60  # 60 seconds
          for i in $(seq 1 $MAX_WAIT); do
            if curl -s -f http://localhost:3000/health > /dev/null 2>&1; then
              log "✅ Application deployed successfully!"
              log "📊 Application status:"
              curl -s http://localhost:3000/health || true

              # Verify database connectivity
              log "🔍 Verifying database connectivity..."
              if curl -s http://localhost:3000/health | grep -q "database.*ok\|healthy"; then
                log "✅ Database connection verified"
              else
                log "⚠️ Database status unclear, but app is responding"
              fi

              log "🎉 Deployment completed successfully at $(date)"
              exit 0
            fi
            echo "Waiting... ($i/$MAX_WAIT)"
            sleep 1
          done

          log "❌ Application failed to start within $MAX_WAIT seconds"
          error_exit "application startup"